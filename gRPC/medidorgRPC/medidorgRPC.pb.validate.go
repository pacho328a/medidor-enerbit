// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: medidorgRPC.proto

package medidorgRPC

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Medidor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Medidor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Medidor with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MedidorMultiError, or nil if none found.
func (m *Medidor) ValidateAll() error {
	return m.validate(true)
}

func (m *Medidor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Brand

	// no validation rules for Address

	if all {
		switch v := interface{}(m.GetInstallationDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MedidorValidationError{
					field:  "InstallationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MedidorValidationError{
					field:  "InstallationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstallationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MedidorValidationError{
				field:  "InstallationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRetirementDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MedidorValidationError{
					field:  "RetirementDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MedidorValidationError{
					field:  "RetirementDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetirementDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MedidorValidationError{
				field:  "RetirementDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Serial

	if val := m.GetLines(); val < 1 || val > 10 {
		err := MedidorValidationError{
			field:  "Lines",
			reason: "value must be inside range [1, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsActive

	if len(errors) > 0 {
		return MedidorMultiError(errors)
	}

	return nil
}

// MedidorMultiError is an error wrapping multiple validation errors returned
// by Medidor.ValidateAll() if the designated constraints aren't met.
type MedidorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MedidorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MedidorMultiError) AllErrors() []error { return m }

// MedidorValidationError is the validation error returned by Medidor.Validate
// if the designated constraints aren't met.
type MedidorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MedidorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MedidorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MedidorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MedidorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MedidorValidationError) ErrorName() string { return "MedidorValidationError" }

// Error satisfies the builtin error interface
func (e MedidorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedidor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MedidorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MedidorValidationError{}

// Validate checks the field values on MedidorGet with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MedidorGet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MedidorGet with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MedidorGetMultiError, or
// nil if none found.
func (m *MedidorGet) ValidateAll() error {
	return m.validate(true)
}

func (m *MedidorGet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Brand

	// no validation rules for Address

	// no validation rules for Installationdate

	// no validation rules for Retirementdate

	// no validation rules for Serial

	// no validation rules for Lines

	// no validation rules for Isactive

	if len(errors) > 0 {
		return MedidorGetMultiError(errors)
	}

	return nil
}

// MedidorGetMultiError is an error wrapping multiple validation errors
// returned by MedidorGet.ValidateAll() if the designated constraints aren't met.
type MedidorGetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MedidorGetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MedidorGetMultiError) AllErrors() []error { return m }

// MedidorGetValidationError is the validation error returned by
// MedidorGet.Validate if the designated constraints aren't met.
type MedidorGetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MedidorGetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MedidorGetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MedidorGetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MedidorGetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MedidorGetValidationError) ErrorName() string { return "MedidorGetValidationError" }

// Error satisfies the builtin error interface
func (e MedidorGetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedidorGet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MedidorGetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MedidorGetValidationError{}

// Validate checks the field values on MedidorUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MedidorUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MedidorUpdate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MedidorUpdateMultiError, or
// nil if none found.
func (m *MedidorUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *MedidorUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Address

	if all {
		switch v := interface{}(m.GetRetirementDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MedidorUpdateValidationError{
					field:  "RetirementDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MedidorUpdateValidationError{
					field:  "RetirementDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetirementDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MedidorUpdateValidationError{
				field:  "RetirementDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Lines

	// no validation rules for IsActive

	if len(errors) > 0 {
		return MedidorUpdateMultiError(errors)
	}

	return nil
}

// MedidorUpdateMultiError is an error wrapping multiple validation errors
// returned by MedidorUpdate.ValidateAll() if the designated constraints
// aren't met.
type MedidorUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MedidorUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MedidorUpdateMultiError) AllErrors() []error { return m }

// MedidorUpdateValidationError is the validation error returned by
// MedidorUpdate.Validate if the designated constraints aren't met.
type MedidorUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MedidorUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MedidorUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MedidorUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MedidorUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MedidorUpdateValidationError) ErrorName() string { return "MedidorUpdateValidationError" }

// Error satisfies the builtin error interface
func (e MedidorUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedidorUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MedidorUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MedidorUpdateValidationError{}

// Validate checks the field values on MedidorIsActive with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MedidorIsActive) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MedidorIsActive with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MedidorIsActiveMultiError, or nil if none found.
func (m *MedidorIsActive) ValidateAll() error {
	return m.validate(true)
}

func (m *MedidorIsActive) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsActive

	if len(errors) > 0 {
		return MedidorIsActiveMultiError(errors)
	}

	return nil
}

// MedidorIsActiveMultiError is an error wrapping multiple validation errors
// returned by MedidorIsActive.ValidateAll() if the designated constraints
// aren't met.
type MedidorIsActiveMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MedidorIsActiveMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MedidorIsActiveMultiError) AllErrors() []error { return m }

// MedidorIsActiveValidationError is the validation error returned by
// MedidorIsActive.Validate if the designated constraints aren't met.
type MedidorIsActiveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MedidorIsActiveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MedidorIsActiveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MedidorIsActiveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MedidorIsActiveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MedidorIsActiveValidationError) ErrorName() string { return "MedidorIsActiveValidationError" }

// Error satisfies the builtin error interface
func (e MedidorIsActiveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedidorIsActive.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MedidorIsActiveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MedidorIsActiveValidationError{}

// Validate checks the field values on MedidorIsActiveResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MedidorIsActiveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MedidorIsActiveResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MedidorIsActiveResponseMultiError, or nil if none found.
func (m *MedidorIsActiveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MedidorIsActiveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMedidores() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MedidorIsActiveResponseValidationError{
						field:  fmt.Sprintf("Medidores[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MedidorIsActiveResponseValidationError{
						field:  fmt.Sprintf("Medidores[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MedidorIsActiveResponseValidationError{
					field:  fmt.Sprintf("Medidores[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MedidorIsActiveResponseMultiError(errors)
	}

	return nil
}

// MedidorIsActiveResponseMultiError is an error wrapping multiple validation
// errors returned by MedidorIsActiveResponse.ValidateAll() if the designated
// constraints aren't met.
type MedidorIsActiveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MedidorIsActiveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MedidorIsActiveResponseMultiError) AllErrors() []error { return m }

// MedidorIsActiveResponseValidationError is the validation error returned by
// MedidorIsActiveResponse.Validate if the designated constraints aren't met.
type MedidorIsActiveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MedidorIsActiveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MedidorIsActiveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MedidorIsActiveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MedidorIsActiveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MedidorIsActiveResponseValidationError) ErrorName() string {
	return "MedidorIsActiveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MedidorIsActiveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedidorIsActiveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MedidorIsActiveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MedidorIsActiveResponseValidationError{}

// Validate checks the field values on MedidorRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MedidorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MedidorRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MedidorRequestMultiError,
// or nil if none found.
func (m *MedidorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MedidorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMedidorEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MedidorRequestValidationError{
					field:  "MedidorEntry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MedidorRequestValidationError{
					field:  "MedidorEntry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMedidorEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MedidorRequestValidationError{
				field:  "MedidorEntry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MedidorRequestMultiError(errors)
	}

	return nil
}

// MedidorRequestMultiError is an error wrapping multiple validation errors
// returned by MedidorRequest.ValidateAll() if the designated constraints
// aren't met.
type MedidorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MedidorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MedidorRequestMultiError) AllErrors() []error { return m }

// MedidorRequestValidationError is the validation error returned by
// MedidorRequest.Validate if the designated constraints aren't met.
type MedidorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MedidorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MedidorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MedidorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MedidorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MedidorRequestValidationError) ErrorName() string { return "MedidorRequestValidationError" }

// Error satisfies the builtin error interface
func (e MedidorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedidorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MedidorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MedidorRequestValidationError{}

// Validate checks the field values on MedidorCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MedidorCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MedidorCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MedidorCreateResponseMultiError, or nil if none found.
func (m *MedidorCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MedidorCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Result

	if len(errors) > 0 {
		return MedidorCreateResponseMultiError(errors)
	}

	return nil
}

// MedidorCreateResponseMultiError is an error wrapping multiple validation
// errors returned by MedidorCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type MedidorCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MedidorCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MedidorCreateResponseMultiError) AllErrors() []error { return m }

// MedidorCreateResponseValidationError is the validation error returned by
// MedidorCreateResponse.Validate if the designated constraints aren't met.
type MedidorCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MedidorCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MedidorCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MedidorCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MedidorCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MedidorCreateResponseValidationError) ErrorName() string {
	return "MedidorCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MedidorCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedidorCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MedidorCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MedidorCreateResponseValidationError{}

// Validate checks the field values on MedidorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MedidorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MedidorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MedidorResponseMultiError, or nil if none found.
func (m *MedidorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MedidorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return MedidorResponseMultiError(errors)
	}

	return nil
}

// MedidorResponseMultiError is an error wrapping multiple validation errors
// returned by MedidorResponse.ValidateAll() if the designated constraints
// aren't met.
type MedidorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MedidorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MedidorResponseMultiError) AllErrors() []error { return m }

// MedidorResponseValidationError is the validation error returned by
// MedidorResponse.Validate if the designated constraints aren't met.
type MedidorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MedidorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MedidorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MedidorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MedidorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MedidorResponseValidationError) ErrorName() string { return "MedidorResponseValidationError" }

// Error satisfies the builtin error interface
func (e MedidorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedidorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MedidorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MedidorResponseValidationError{}

// Validate checks the field values on MedidorUUID with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MedidorUUID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MedidorUUID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MedidorUUIDMultiError, or
// nil if none found.
func (m *MedidorUUID) ValidateAll() error {
	return m.validate(true)
}

func (m *MedidorUUID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MedidorUUIDMultiError(errors)
	}

	return nil
}

// MedidorUUIDMultiError is an error wrapping multiple validation errors
// returned by MedidorUUID.ValidateAll() if the designated constraints aren't met.
type MedidorUUIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MedidorUUIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MedidorUUIDMultiError) AllErrors() []error { return m }

// MedidorUUIDValidationError is the validation error returned by
// MedidorUUID.Validate if the designated constraints aren't met.
type MedidorUUIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MedidorUUIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MedidorUUIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MedidorUUIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MedidorUUIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MedidorUUIDValidationError) ErrorName() string { return "MedidorUUIDValidationError" }

// Error satisfies the builtin error interface
func (e MedidorUUIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedidorUUID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MedidorUUIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MedidorUUIDValidationError{}

// Validate checks the field values on MedidorMarca with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MedidorMarca) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MedidorMarca with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MedidorMarcaMultiError, or
// nil if none found.
func (m *MedidorMarca) ValidateAll() error {
	return m.validate(true)
}

func (m *MedidorMarca) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Marca

	if len(errors) > 0 {
		return MedidorMarcaMultiError(errors)
	}

	return nil
}

// MedidorMarcaMultiError is an error wrapping multiple validation errors
// returned by MedidorMarca.ValidateAll() if the designated constraints aren't met.
type MedidorMarcaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MedidorMarcaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MedidorMarcaMultiError) AllErrors() []error { return m }

// MedidorMarcaValidationError is the validation error returned by
// MedidorMarca.Validate if the designated constraints aren't met.
type MedidorMarcaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MedidorMarcaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MedidorMarcaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MedidorMarcaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MedidorMarcaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MedidorMarcaValidationError) ErrorName() string { return "MedidorMarcaValidationError" }

// Error satisfies the builtin error interface
func (e MedidorMarcaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedidorMarca.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MedidorMarcaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MedidorMarcaValidationError{}

// Validate checks the field values on MedidorSerial with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MedidorSerial) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MedidorSerial with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MedidorSerialMultiError, or
// nil if none found.
func (m *MedidorSerial) ValidateAll() error {
	return m.validate(true)
}

func (m *MedidorSerial) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Serial

	if len(errors) > 0 {
		return MedidorSerialMultiError(errors)
	}

	return nil
}

// MedidorSerialMultiError is an error wrapping multiple validation errors
// returned by MedidorSerial.ValidateAll() if the designated constraints
// aren't met.
type MedidorSerialMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MedidorSerialMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MedidorSerialMultiError) AllErrors() []error { return m }

// MedidorSerialValidationError is the validation error returned by
// MedidorSerial.Validate if the designated constraints aren't met.
type MedidorSerialValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MedidorSerialValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MedidorSerialValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MedidorSerialValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MedidorSerialValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MedidorSerialValidationError) ErrorName() string { return "MedidorSerialValidationError" }

// Error satisfies the builtin error interface
func (e MedidorSerialValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedidorSerial.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MedidorSerialValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MedidorSerialValidationError{}
